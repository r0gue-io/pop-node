
//! Autogenerated weights for `nonfungibles`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 45.0.0
//! DATE: 2025-01-28, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `R0GUE`, CPU: `<UNKNOWN>`
//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("dev")`, DB CACHE: `1024`

// Executed Command:
// ./target/production/pop-node
// benchmark
// pallet
// --chain=dev
// --wasm-execution=compiled
// --pallet=nonfungibles
// --steps=50
// --repeat=20
// --json
// --template
// ./scripts/pallet-weights-template.hbs
// --output=./pallets/api/src/nonfungibles/weights.rs
// --extrinsic=

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for `nonfungibles`.
pub trait WeightInfo {
	fn approve(a: u32, c: u32, ) -> Weight;
	fn total_supply() -> Weight;
	fn balance_of() -> Weight;
	fn allowance() -> Weight;
	fn owner_of() -> Weight;
	fn get_attribute() -> Weight;
	fn collection() -> Weight;
	fn next_collection_id() -> Weight;
	fn item_metadata() -> Weight;
}

/// Weights for `nonfungibles` using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: `Nfts::Item` (r:1 w:1)
	/// Proof: `Nfts::Item` (`max_values`: None, `max_size`: Some(861), added: 3336, mode: `MaxEncodedLen`)
	/// Storage: `Nfts::CollectionConfigOf` (r:1 w:0)
	/// Proof: `Nfts::CollectionConfigOf` (`max_values`: None, `max_size`: Some(73), added: 2548, mode: `MaxEncodedLen`)
	/// Storage: `Nfts::AccountBalance` (r:1 w:0)
	/// Proof: `Nfts::AccountBalance` (`max_values`: None, `max_size`: Some(120), added: 2595, mode: `MaxEncodedLen`)
	/// Storage: `Nfts::CollectionApprovals` (r:1 w:1)
	/// Proof: `Nfts::CollectionApprovals` (`max_values`: None, `max_size`: Some(137), added: 2612, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// The range of component `a` is `[0, 1]`.
	/// The range of component `c` is `[0, 1]`.
	fn approve(a: u32, c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `606`
		//  Estimated: `68341938741594600 + a * (3168 ±44_956_152_011_428) + c * (2663 ±729_819_634_434_010)`
		// Minimum execution time: 14_000_000 picoseconds.
		Weight::from_parts(28_496_938, 68341938741594600)
			// Standard Error: 134_903
			.saturating_add(Weight::from_parts(66_326, 0).saturating_mul(a.into()))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
			.saturating_add(Weight::from_parts(0, 3168).saturating_mul(a.into()))
			.saturating_add(Weight::from_parts(0, 2663).saturating_mul(c.into()))
	}
	/// Storage: `Nfts::Collection` (r:1 w:0)
	/// Proof: `Nfts::Collection` (`max_values`: None, `max_size`: Some(84), added: 2559, mode: `MaxEncodedLen`)
	fn total_supply() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3`
		//  Estimated: `3549`
		// Minimum execution time: 1_000_000 picoseconds.
		Weight::from_parts(2_000_000, 3549)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	/// Storage: `Nfts::AccountBalance` (r:1 w:0)
	/// Proof: `Nfts::AccountBalance` (`max_values`: None, `max_size`: Some(120), added: 2595, mode: `MaxEncodedLen`)
	fn balance_of() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3`
		//  Estimated: `3585`
		// Minimum execution time: 2_000_000 picoseconds.
		Weight::from_parts(3_000_000, 3585)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	/// Storage: `Nfts::CollectionApprovals` (r:1 w:0)
	/// Proof: `Nfts::CollectionApprovals` (`max_values`: None, `max_size`: Some(137), added: 2612, mode: `MaxEncodedLen`)
	/// Storage: `Nfts::Item` (r:1 w:0)
	/// Proof: `Nfts::Item` (`max_values`: None, `max_size`: Some(861), added: 3336, mode: `MaxEncodedLen`)
	fn allowance() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3`
		//  Estimated: `4326`
		// Minimum execution time: 5_000_000 picoseconds.
		Weight::from_parts(6_000_000, 4326)
			.saturating_add(T::DbWeight::get().reads(2_u64))
	}
	/// Storage: `Nfts::Item` (r:1 w:0)
	/// Proof: `Nfts::Item` (`max_values`: None, `max_size`: Some(861), added: 3336, mode: `MaxEncodedLen`)
	fn owner_of() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3`
		//  Estimated: `4326`
		// Minimum execution time: 2_000_000 picoseconds.
		Weight::from_parts(2_000_000, 4326)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	/// Storage: `Nfts::Attribute` (r:1 w:0)
	/// Proof: `Nfts::Attribute` (`max_values`: None, `max_size`: Some(479), added: 2954, mode: `MaxEncodedLen`)
	fn get_attribute() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3`
		//  Estimated: `3944`
		// Minimum execution time: 3_000_000 picoseconds.
		Weight::from_parts(4_000_000, 3944)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	/// Storage: `Nfts::Collection` (r:1 w:0)
	/// Proof: `Nfts::Collection` (`max_values`: None, `max_size`: Some(84), added: 2559, mode: `MaxEncodedLen`)
	fn collection() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3`
		//  Estimated: `3549`
		// Minimum execution time: 1_000_000 picoseconds.
		Weight::from_parts(2_000_000, 3549)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	/// Storage: `Nfts::NextCollectionId` (r:1 w:0)
	/// Proof: `Nfts::NextCollectionId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	fn next_collection_id() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3`
		//  Estimated: `1489`
		// Minimum execution time: 1_000_000 picoseconds.
		Weight::from_parts(1_000_000, 1489)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	/// Storage: `Nfts::ItemMetadataOf` (r:1 w:0)
	/// Proof: `Nfts::ItemMetadataOf` (`max_values`: None, `max_size`: Some(347), added: 2822, mode: `MaxEncodedLen`)
	fn item_metadata() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3`
		//  Estimated: `3812`
		// Minimum execution time: 2_000_000 picoseconds.
		Weight::from_parts(2_000_000, 3812)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
}

// For backwards compatibility and tests.
impl WeightInfo for () {
	/// Storage: `Nfts::Item` (r:1 w:1)
	/// Proof: `Nfts::Item` (`max_values`: None, `max_size`: Some(861), added: 3336, mode: `MaxEncodedLen`)
	/// Storage: `Nfts::CollectionConfigOf` (r:1 w:0)
	/// Proof: `Nfts::CollectionConfigOf` (`max_values`: None, `max_size`: Some(73), added: 2548, mode: `MaxEncodedLen`)
	/// Storage: `Nfts::AccountBalance` (r:1 w:0)
	/// Proof: `Nfts::AccountBalance` (`max_values`: None, `max_size`: Some(120), added: 2595, mode: `MaxEncodedLen`)
	/// Storage: `Nfts::CollectionApprovals` (r:1 w:1)
	/// Proof: `Nfts::CollectionApprovals` (`max_values`: None, `max_size`: Some(137), added: 2612, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// The range of component `a` is `[0, 1]`.
	/// The range of component `c` is `[0, 1]`.
	fn approve(a: u32, c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `606`
		//  Estimated: `68341938741594600 + a * (3168 ±44_956_152_011_428) + c * (2663 ±729_819_634_434_010)`
		// Minimum execution time: 14_000_000 picoseconds.
		Weight::from_parts(28_496_938, 68341938741594600)
			// Standard Error: 134_903
			.saturating_add(Weight::from_parts(66_326, 0).saturating_mul(a.into()))
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
			.saturating_add(Weight::from_parts(0, 3168).saturating_mul(a.into()))
			.saturating_add(Weight::from_parts(0, 2663).saturating_mul(c.into()))
	}
	/// Storage: `Nfts::Collection` (r:1 w:0)
	/// Proof: `Nfts::Collection` (`max_values`: None, `max_size`: Some(84), added: 2559, mode: `MaxEncodedLen`)
	fn total_supply() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3`
		//  Estimated: `3549`
		// Minimum execution time: 1_000_000 picoseconds.
		Weight::from_parts(2_000_000, 3549)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	/// Storage: `Nfts::AccountBalance` (r:1 w:0)
	/// Proof: `Nfts::AccountBalance` (`max_values`: None, `max_size`: Some(120), added: 2595, mode: `MaxEncodedLen`)
	fn balance_of() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3`
		//  Estimated: `3585`
		// Minimum execution time: 2_000_000 picoseconds.
		Weight::from_parts(3_000_000, 3585)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	/// Storage: `Nfts::CollectionApprovals` (r:1 w:0)
	/// Proof: `Nfts::CollectionApprovals` (`max_values`: None, `max_size`: Some(137), added: 2612, mode: `MaxEncodedLen`)
	/// Storage: `Nfts::Item` (r:1 w:0)
	/// Proof: `Nfts::Item` (`max_values`: None, `max_size`: Some(861), added: 3336, mode: `MaxEncodedLen`)
	fn allowance() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3`
		//  Estimated: `4326`
		// Minimum execution time: 5_000_000 picoseconds.
		Weight::from_parts(6_000_000, 4326)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
	}
	/// Storage: `Nfts::Item` (r:1 w:0)
	/// Proof: `Nfts::Item` (`max_values`: None, `max_size`: Some(861), added: 3336, mode: `MaxEncodedLen`)
	fn owner_of() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3`
		//  Estimated: `4326`
		// Minimum execution time: 2_000_000 picoseconds.
		Weight::from_parts(2_000_000, 4326)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	/// Storage: `Nfts::Attribute` (r:1 w:0)
	/// Proof: `Nfts::Attribute` (`max_values`: None, `max_size`: Some(479), added: 2954, mode: `MaxEncodedLen`)
	fn get_attribute() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3`
		//  Estimated: `3944`
		// Minimum execution time: 3_000_000 picoseconds.
		Weight::from_parts(4_000_000, 3944)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	/// Storage: `Nfts::Collection` (r:1 w:0)
	/// Proof: `Nfts::Collection` (`max_values`: None, `max_size`: Some(84), added: 2559, mode: `MaxEncodedLen`)
	fn collection() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3`
		//  Estimated: `3549`
		// Minimum execution time: 1_000_000 picoseconds.
		Weight::from_parts(2_000_000, 3549)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	/// Storage: `Nfts::NextCollectionId` (r:1 w:0)
	/// Proof: `Nfts::NextCollectionId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	fn next_collection_id() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3`
		//  Estimated: `1489`
		// Minimum execution time: 1_000_000 picoseconds.
		Weight::from_parts(1_000_000, 1489)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	/// Storage: `Nfts::ItemMetadataOf` (r:1 w:0)
	/// Proof: `Nfts::ItemMetadataOf` (`max_values`: None, `max_size`: Some(347), added: 2822, mode: `MaxEncodedLen`)
	fn item_metadata() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3`
		//  Estimated: `3812`
		// Minimum execution time: 2_000_000 picoseconds.
		Weight::from_parts(2_000_000, 3812)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
}
