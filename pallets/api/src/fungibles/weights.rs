
//! Autogenerated weights for `fungibles`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 40.0.0
//! DATE: 2024-09-13, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `R0GUE`, CPU: `<UNKNOWN>`
//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("dev")`, DB CACHE: `1024`

// Executed Command:
// ./target/release/pop-node
// benchmark
// pallet
// --chain=dev
// --wasm-execution=compiled
// --pallet=fungibles
// --steps=50
// --repeat=20
// --json
// --template
// ./scripts/pallet-weights-template.hbs
// --output=./pallets/api/src/fungibles/weights.rs
// --extrinsic=

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for `fungibles`.
pub trait WeightInfo {
	fn approve(a: u32, c: u32, ) -> Weight;
	fn total_supply() -> Weight;
	fn balance_of() -> Weight;
	fn allowance() -> Weight;
	fn token_name() -> Weight;
	fn token_symbol() -> Weight;
	fn token_decimals() -> Weight;
	fn token_exists() -> Weight;
}

/// Weights for `fungibles` using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: `Assets::Approvals` (r:1 w:1)
	/// Proof: `Assets::Approvals` (`max_values`: None, `max_size`: Some(148), added: 2623, mode: `MaxEncodedLen`)
	/// Storage: `Assets::Asset` (r:1 w:1)
	/// Proof: `Assets::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// The range of component `a` is `[0, 1]`.
	/// The range of component `c` is `[0, 1]`.
	fn approve(a: u32, c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `413 + c * (102 ±0)`
		//  Estimated: `3675`
		// Minimum execution time: 20_000_000 picoseconds.
		Weight::from_parts(1_473_469, 3675)
			// Standard Error: 89_329
			.saturating_add(Weight::from_parts(19_606_122, 0).saturating_mul(a.into()))
			// Standard Error: 89_329
			.saturating_add(Weight::from_parts(30_920_408, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(c.into())))
			.saturating_add(T::DbWeight::get().writes(2_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(c.into())))
	}
	/// Storage: `Assets::Asset` (r:1 w:0)
	/// Proof: `Assets::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	fn total_supply() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `6`
		//  Estimated: `3675`
		// Minimum execution time: 1_000_000 picoseconds.
		Weight::from_parts(2_000_000, 3675)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	/// Storage: `Assets::Account` (r:1 w:0)
	/// Proof: `Assets::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	fn balance_of() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `6`
		//  Estimated: `3599`
		// Minimum execution time: 2_000_000 picoseconds.
		Weight::from_parts(3_000_000, 3599)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	/// Storage: `Assets::Approvals` (r:1 w:0)
	/// Proof: `Assets::Approvals` (`max_values`: None, `max_size`: Some(148), added: 2623, mode: `MaxEncodedLen`)
	fn allowance() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `6`
		//  Estimated: `3613`
		// Minimum execution time: 4_000_000 picoseconds.
		Weight::from_parts(4_000_000, 3613)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	/// Storage: `Assets::Metadata` (r:1 w:0)
	/// Proof: `Assets::Metadata` (`max_values`: None, `max_size`: Some(140), added: 2615, mode: `MaxEncodedLen`)
	fn token_name() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `6`
		//  Estimated: `3605`
		// Minimum execution time: 1_000_000 picoseconds.
		Weight::from_parts(2_000_000, 3605)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	/// Storage: `Assets::Metadata` (r:1 w:0)
	/// Proof: `Assets::Metadata` (`max_values`: None, `max_size`: Some(140), added: 2615, mode: `MaxEncodedLen`)
	fn token_symbol() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `6`
		//  Estimated: `3605`
		// Minimum execution time: 2_000_000 picoseconds.
		Weight::from_parts(2_000_000, 3605)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	/// Storage: `Assets::Metadata` (r:1 w:0)
	/// Proof: `Assets::Metadata` (`max_values`: None, `max_size`: Some(140), added: 2615, mode: `MaxEncodedLen`)
	fn token_decimals() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `6`
		//  Estimated: `3605`
		// Minimum execution time: 1_000_000 picoseconds.
		Weight::from_parts(2_000_000, 3605)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	/// Storage: `Assets::Asset` (r:1 w:0)
	/// Proof: `Assets::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	fn token_exists() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `6`
		//  Estimated: `3675`
		// Minimum execution time: 1_000_000 picoseconds.
		Weight::from_parts(2_000_000, 3675)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
}

// For backwards compatibility and tests.
impl WeightInfo for () {
	/// Storage: `Assets::Approvals` (r:1 w:1)
	/// Proof: `Assets::Approvals` (`max_values`: None, `max_size`: Some(148), added: 2623, mode: `MaxEncodedLen`)
	/// Storage: `Assets::Asset` (r:1 w:1)
	/// Proof: `Assets::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// The range of component `a` is `[0, 1]`.
	/// The range of component `c` is `[0, 1]`.
	fn approve(a: u32, c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `413 + c * (102 ±0)`
		//  Estimated: `3675`
		// Minimum execution time: 20_000_000 picoseconds.
		Weight::from_parts(1_473_469, 3675)
			// Standard Error: 89_329
			.saturating_add(Weight::from_parts(19_606_122, 0).saturating_mul(a.into()))
			// Standard Error: 89_329
			.saturating_add(Weight::from_parts(30_920_408, 0).saturating_mul(c.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(c.into())))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
			.saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(c.into())))
	}
	/// Storage: `Assets::Asset` (r:1 w:0)
	/// Proof: `Assets::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	fn total_supply() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `6`
		//  Estimated: `3675`
		// Minimum execution time: 1_000_000 picoseconds.
		Weight::from_parts(2_000_000, 3675)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	/// Storage: `Assets::Account` (r:1 w:0)
	/// Proof: `Assets::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	fn balance_of() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `6`
		//  Estimated: `3599`
		// Minimum execution time: 2_000_000 picoseconds.
		Weight::from_parts(3_000_000, 3599)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	/// Storage: `Assets::Approvals` (r:1 w:0)
	/// Proof: `Assets::Approvals` (`max_values`: None, `max_size`: Some(148), added: 2623, mode: `MaxEncodedLen`)
	fn allowance() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `6`
		//  Estimated: `3613`
		// Minimum execution time: 4_000_000 picoseconds.
		Weight::from_parts(4_000_000, 3613)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	/// Storage: `Assets::Metadata` (r:1 w:0)
	/// Proof: `Assets::Metadata` (`max_values`: None, `max_size`: Some(140), added: 2615, mode: `MaxEncodedLen`)
	fn token_name() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `6`
		//  Estimated: `3605`
		// Minimum execution time: 1_000_000 picoseconds.
		Weight::from_parts(2_000_000, 3605)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	/// Storage: `Assets::Metadata` (r:1 w:0)
	/// Proof: `Assets::Metadata` (`max_values`: None, `max_size`: Some(140), added: 2615, mode: `MaxEncodedLen`)
	fn token_symbol() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `6`
		//  Estimated: `3605`
		// Minimum execution time: 2_000_000 picoseconds.
		Weight::from_parts(2_000_000, 3605)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	/// Storage: `Assets::Metadata` (r:1 w:0)
	/// Proof: `Assets::Metadata` (`max_values`: None, `max_size`: Some(140), added: 2615, mode: `MaxEncodedLen`)
	fn token_decimals() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `6`
		//  Estimated: `3605`
		// Minimum execution time: 1_000_000 picoseconds.
		Weight::from_parts(2_000_000, 3605)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	/// Storage: `Assets::Asset` (r:1 w:0)
	/// Proof: `Assets::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	fn token_exists() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `6`
		//  Estimated: `3675`
		// Minimum execution time: 1_000_000 picoseconds.
		Weight::from_parts(2_000_000, 3675)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
}

