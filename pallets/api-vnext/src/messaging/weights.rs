
//! Autogenerated weights for `pallet_api_vnext :: messaging`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 49.0.0
//! DATE: 2025-07-28, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `R0GUE`, CPU: `<UNKNOWN>`
//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("pop-devnet-dev")`, DB CACHE: `1024`

// Executed Command:
// ./target/release/pop-node
// benchmark
// pallet
// --chain=pop-devnet-dev
// --wasm-execution=compiled
// --pallet=pallet_api_vnext :: messaging
// --steps=50
// --repeat=20
// --json
// --template=./scripts/templates/pallet-weight-template.hbs
// --output=./pallets/api-vnext/src/messaging/weights.rs
// --extrinsic=*

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for `pallet_api_vnext :: messaging`.
pub trait WeightInfo {
	fn block_number() -> Weight;
	fn get_response() -> Weight;
	fn id() -> Weight;
	fn ismp_get(x: u32, y: u32, a: u32, ) -> Weight;
	fn ismp_on_response(x: u32, ) -> Weight;
	fn ismp_on_timeout(x: u32, ) -> Weight;
	fn ismp_post(x: u32, y: u32, ) -> Weight;
	fn poll_status() -> Weight;
	fn remove(x: u32, ) -> Weight;
	fn xcm_new_query(x: u32, ) -> Weight;
	fn xcm_response() -> Weight;
}

/// Weights for `pallet_api_vnext :: messaging` using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	fn block_number() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_000_000 picoseconds.
		Weight::from_parts(1_000_000, 0)
	}
	/// Storage: `Messaging::Messages` (r:1 w:0)
	/// Proof: `Messaging::Messages` (`max_values`: None, `max_size`: Some(12782), added: 15257, mode: `MaxEncodedLen`)
	fn get_response() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `703`
		//  Estimated: `16247`
		// Minimum execution time: 5_000_000 picoseconds.
		Weight::from_parts(6_000_000, 16247)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	/// Storage: `ParachainInfo::ParachainId` (r:1 w:0)
	/// Proof: `ParachainInfo::ParachainId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	fn id() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `69`
		//  Estimated: `1489`
		// Minimum execution time: 3_000_000 picoseconds.
		Weight::from_parts(3_000_000, 1489)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	/// Storage: `Skipped::Metadata` (r:0 w:0)
	/// Proof: `Skipped::Metadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `x` is `[0, 64]`.
	/// The range of component `y` is `[0, 10]`.
	/// The range of component `a` is `[0, 1]`.
	fn ismp_get(x: u32, y: u32, a: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `804`
		//  Estimated: `804`
		// Minimum execution time: 109_000_000 picoseconds.
		Weight::from_parts(134_854_162, 804)
			// Standard Error: 5_027
			.saturating_add(Weight::from_parts(34_184, 0).saturating_mul(x.into()))
			// Standard Error: 30_837
			.saturating_add(Weight::from_parts(252_129, 0).saturating_mul(y.into()))
			// Standard Error: 207_842
			.saturating_add(Weight::from_parts(943_656, 0).saturating_mul(a.into()))
			.saturating_add(T::DbWeight::get().reads(7_u64))
			.saturating_add(T::DbWeight::get().writes(7_u64))
	}
	/// Storage: `Messaging::IsmpRequests` (r:1 w:1)
	/// Proof: `Messaging::IsmpRequests` (`max_values`: None, `max_size`: Some(40), added: 2515, mode: `MaxEncodedLen`)
	/// Storage: `Messaging::Messages` (r:1 w:1)
	/// Proof: `Messaging::Messages` (`max_values`: None, `max_size`: Some(12782), added: 15257, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(229), added: 2704, mode: `MaxEncodedLen`)
	/// The range of component `x` is `[0, 1]`.
	fn ismp_on_response(_x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `563`
		//  Estimated: `16247`
		// Minimum execution time: 90_000_000 picoseconds.
		Weight::from_parts(102_659_183, 16247)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	/// Storage: `Messaging::IsmpRequests` (r:1 w:0)
	/// Proof: `Messaging::IsmpRequests` (`max_values`: None, `max_size`: Some(40), added: 2515, mode: `MaxEncodedLen`)
	/// Storage: `Messaging::Messages` (r:1 w:1)
	/// Proof: `Messaging::Messages` (`max_values`: None, `max_size`: Some(12782), added: 15257, mode: `MaxEncodedLen`)
	/// The range of component `x` is `[0, 2]`.
	fn ismp_on_timeout(_x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `348`
		//  Estimated: `16247`
		// Minimum execution time: 15_000_000 picoseconds.
		Weight::from_parts(16_000_000, 16247)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Skipped::Metadata` (r:0 w:0)
	/// Proof: `Skipped::Metadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `x` is `[0, 512]`.
	/// The range of component `y` is `[0, 1]`.
	fn ismp_post(x: u32, y: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `804`
		//  Estimated: `804`
		// Minimum execution time: 105_000_000 picoseconds.
		Weight::from_parts(103_541_555, 804)
			// Standard Error: 261
			.saturating_add(Weight::from_parts(7_149, 0).saturating_mul(x.into()))
			// Standard Error: 87_369
			.saturating_add(Weight::from_parts(32_325_090, 0).saturating_mul(y.into()))
			.saturating_add(T::DbWeight::get().reads(7_u64))
			.saturating_add(T::DbWeight::get().writes(7_u64))
	}
	/// Storage: `Messaging::Messages` (r:1 w:0)
	/// Proof: `Messaging::Messages` (`max_values`: None, `max_size`: Some(12782), added: 15257, mode: `MaxEncodedLen`)
	fn poll_status() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `703`
		//  Estimated: `16247`
		// Minimum execution time: 5_000_000 picoseconds.
		Weight::from_parts(6_000_000, 16247)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	/// Storage: `Messaging::Messages` (r:100 w:100)
	/// Proof: `Messaging::Messages` (`max_values`: None, `max_size`: Some(12782), added: 15257, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(229), added: 2704, mode: `MaxEncodedLen`)
	/// Storage: `Messaging::IsmpRequests` (r:0 w:100)
	/// Proof: `Messaging::IsmpRequests` (`max_values`: None, `max_size`: Some(40), added: 2515, mode: `MaxEncodedLen`)
	/// The range of component `x` is `[1, 100]`.
	fn remove(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `421 + x * (109 ±0)`
		//  Estimated: `3694 + x * (15257 ±0)`
		// Minimum execution time: 65_000_000 picoseconds.
		Weight::from_parts(65_000_000, 3694)
			// Standard Error: 45_546
			.saturating_add(Weight::from_parts(53_133_747, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(x.into())))
			.saturating_add(T::DbWeight::get().writes(1_u64))
			.saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(x.into())))
			.saturating_add(Weight::from_parts(0, 15257).saturating_mul(x.into()))
	}
	/// Storage: `Messaging::NextMessageId` (r:1 w:1)
	/// Proof: `Messaging::NextMessageId` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `Messaging::XcmQueryTimeouts` (r:1 w:1)
	/// Proof: `Messaging::XcmQueryTimeouts` (`max_values`: None, `max_size`: Some(814), added: 3289, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(229), added: 2704, mode: `MaxEncodedLen`)
	/// Storage: `PolkadotXcm::QueryCounter` (r:1 w:1)
	/// Proof: `PolkadotXcm::QueryCounter` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Messaging::XcmQueries` (r:0 w:1)
	/// Proof: `Messaging::XcmQueries` (`max_values`: None, `max_size`: Some(24), added: 2499, mode: `MaxEncodedLen`)
	/// Storage: `Messaging::Messages` (r:0 w:1)
	/// Proof: `Messaging::Messages` (`max_values`: None, `max_size`: Some(12782), added: 15257, mode: `MaxEncodedLen`)
	/// Storage: `PolkadotXcm::Queries` (r:0 w:1)
	/// Proof: `PolkadotXcm::Queries` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `x` is `[0, 1]`.
	fn xcm_new_query(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `342`
		//  Estimated: `4279`
		// Minimum execution time: 67_000_000 picoseconds.
		Weight::from_parts(68_483_673, 4279)
			// Standard Error: 231_861
			.saturating_add(Weight::from_parts(20_516_326, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(7_u64))
	}
	/// Storage: `Messaging::XcmQueries` (r:1 w:1)
	/// Proof: `Messaging::XcmQueries` (`max_values`: None, `max_size`: Some(24), added: 2499, mode: `MaxEncodedLen`)
	/// Storage: `Messaging::Messages` (r:1 w:1)
	/// Proof: `Messaging::Messages` (`max_values`: None, `max_size`: Some(12782), added: 15257, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(229), added: 2704, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn xcm_response() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `531`
		//  Estimated: `16247`
		// Minimum execution time: 79_000_000 picoseconds.
		Weight::from_parts(81_000_000, 16247)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
}

// For backwards compatibility and tests.
impl WeightInfo for () {
	fn block_number() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_000_000 picoseconds.
		Weight::from_parts(1_000_000, 0)
	}
	/// Storage: `Messaging::Messages` (r:1 w:0)
	/// Proof: `Messaging::Messages` (`max_values`: None, `max_size`: Some(12782), added: 15257, mode: `MaxEncodedLen`)
	fn get_response() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `703`
		//  Estimated: `16247`
		// Minimum execution time: 5_000_000 picoseconds.
		Weight::from_parts(6_000_000, 16247)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	/// Storage: `ParachainInfo::ParachainId` (r:1 w:0)
	/// Proof: `ParachainInfo::ParachainId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	fn id() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `69`
		//  Estimated: `1489`
		// Minimum execution time: 3_000_000 picoseconds.
		Weight::from_parts(3_000_000, 1489)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	/// Storage: `Skipped::Metadata` (r:0 w:0)
	/// Proof: `Skipped::Metadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `x` is `[0, 64]`.
	/// The range of component `y` is `[0, 10]`.
	/// The range of component `a` is `[0, 1]`.
	fn ismp_get(x: u32, y: u32, a: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `804`
		//  Estimated: `804`
		// Minimum execution time: 109_000_000 picoseconds.
		Weight::from_parts(134_854_162, 804)
			// Standard Error: 5_027
			.saturating_add(Weight::from_parts(34_184, 0).saturating_mul(x.into()))
			// Standard Error: 30_837
			.saturating_add(Weight::from_parts(252_129, 0).saturating_mul(y.into()))
			// Standard Error: 207_842
			.saturating_add(Weight::from_parts(943_656, 0).saturating_mul(a.into()))
			.saturating_add(RocksDbWeight::get().reads(7_u64))
			.saturating_add(RocksDbWeight::get().writes(7_u64))
	}
	/// Storage: `Messaging::IsmpRequests` (r:1 w:1)
	/// Proof: `Messaging::IsmpRequests` (`max_values`: None, `max_size`: Some(40), added: 2515, mode: `MaxEncodedLen`)
	/// Storage: `Messaging::Messages` (r:1 w:1)
	/// Proof: `Messaging::Messages` (`max_values`: None, `max_size`: Some(12782), added: 15257, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(229), added: 2704, mode: `MaxEncodedLen`)
	/// The range of component `x` is `[0, 1]`.
	fn ismp_on_response(_x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `563`
		//  Estimated: `16247`
		// Minimum execution time: 90_000_000 picoseconds.
		Weight::from_parts(102_659_183, 16247)
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
	}
	/// Storage: `Messaging::IsmpRequests` (r:1 w:0)
	/// Proof: `Messaging::IsmpRequests` (`max_values`: None, `max_size`: Some(40), added: 2515, mode: `MaxEncodedLen`)
	/// Storage: `Messaging::Messages` (r:1 w:1)
	/// Proof: `Messaging::Messages` (`max_values`: None, `max_size`: Some(12782), added: 15257, mode: `MaxEncodedLen`)
	/// The range of component `x` is `[0, 2]`.
	fn ismp_on_timeout(_x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `348`
		//  Estimated: `16247`
		// Minimum execution time: 15_000_000 picoseconds.
		Weight::from_parts(16_000_000, 16247)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Skipped::Metadata` (r:0 w:0)
	/// Proof: `Skipped::Metadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `x` is `[0, 512]`.
	/// The range of component `y` is `[0, 1]`.
	fn ismp_post(x: u32, y: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `804`
		//  Estimated: `804`
		// Minimum execution time: 105_000_000 picoseconds.
		Weight::from_parts(103_541_555, 804)
			// Standard Error: 261
			.saturating_add(Weight::from_parts(7_149, 0).saturating_mul(x.into()))
			// Standard Error: 87_369
			.saturating_add(Weight::from_parts(32_325_090, 0).saturating_mul(y.into()))
			.saturating_add(RocksDbWeight::get().reads(7_u64))
			.saturating_add(RocksDbWeight::get().writes(7_u64))
	}
	/// Storage: `Messaging::Messages` (r:1 w:0)
	/// Proof: `Messaging::Messages` (`max_values`: None, `max_size`: Some(12782), added: 15257, mode: `MaxEncodedLen`)
	fn poll_status() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `703`
		//  Estimated: `16247`
		// Minimum execution time: 5_000_000 picoseconds.
		Weight::from_parts(6_000_000, 16247)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	/// Storage: `Messaging::Messages` (r:100 w:100)
	/// Proof: `Messaging::Messages` (`max_values`: None, `max_size`: Some(12782), added: 15257, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(229), added: 2704, mode: `MaxEncodedLen`)
	/// Storage: `Messaging::IsmpRequests` (r:0 w:100)
	/// Proof: `Messaging::IsmpRequests` (`max_values`: None, `max_size`: Some(40), added: 2515, mode: `MaxEncodedLen`)
	/// The range of component `x` is `[1, 100]`.
	fn remove(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `421 + x * (109 ±0)`
		//  Estimated: `3694 + x * (15257 ±0)`
		// Minimum execution time: 65_000_000 picoseconds.
		Weight::from_parts(65_000_000, 3694)
			// Standard Error: 45_546
			.saturating_add(Weight::from_parts(53_133_747, 0).saturating_mul(x.into()))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(x.into())))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
			.saturating_add(RocksDbWeight::get().writes((2_u64).saturating_mul(x.into())))
			.saturating_add(Weight::from_parts(0, 15257).saturating_mul(x.into()))
	}
	/// Storage: `Messaging::NextMessageId` (r:1 w:1)
	/// Proof: `Messaging::NextMessageId` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `Messaging::XcmQueryTimeouts` (r:1 w:1)
	/// Proof: `Messaging::XcmQueryTimeouts` (`max_values`: None, `max_size`: Some(814), added: 3289, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(229), added: 2704, mode: `MaxEncodedLen`)
	/// Storage: `PolkadotXcm::QueryCounter` (r:1 w:1)
	/// Proof: `PolkadotXcm::QueryCounter` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Messaging::XcmQueries` (r:0 w:1)
	/// Proof: `Messaging::XcmQueries` (`max_values`: None, `max_size`: Some(24), added: 2499, mode: `MaxEncodedLen`)
	/// Storage: `Messaging::Messages` (r:0 w:1)
	/// Proof: `Messaging::Messages` (`max_values`: None, `max_size`: Some(12782), added: 15257, mode: `MaxEncodedLen`)
	/// Storage: `PolkadotXcm::Queries` (r:0 w:1)
	/// Proof: `PolkadotXcm::Queries` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `x` is `[0, 1]`.
	fn xcm_new_query(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `342`
		//  Estimated: `4279`
		// Minimum execution time: 67_000_000 picoseconds.
		Weight::from_parts(68_483_673, 4279)
			// Standard Error: 231_861
			.saturating_add(Weight::from_parts(20_516_326, 0).saturating_mul(x.into()))
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(7_u64))
	}
	/// Storage: `Messaging::XcmQueries` (r:1 w:1)
	/// Proof: `Messaging::XcmQueries` (`max_values`: None, `max_size`: Some(24), added: 2499, mode: `MaxEncodedLen`)
	/// Storage: `Messaging::Messages` (r:1 w:1)
	/// Proof: `Messaging::Messages` (`max_values`: None, `max_size`: Some(12782), added: 15257, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(229), added: 2704, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn xcm_response() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `531`
		//  Estimated: `16247`
		// Minimum execution time: 79_000_000 picoseconds.
		Weight::from_parts(81_000_000, 16247)
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
	}
}

