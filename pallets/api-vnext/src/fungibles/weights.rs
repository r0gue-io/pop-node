
//! Autogenerated weights for `pallet_api_vnext::fungibles`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 32.0.0
//! DATE: 2025-06-25, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `R0GUE`, CPU: `<UNKNOWN>`
//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("pop-devnet-dev")`, DB CACHE: `1024`

// Executed Command:
// ./target/release/pop-node
// benchmark
// pallet
// --chain=pop-devnet-dev
// --wasm-execution=compiled
// --pallet=pallet-api-vnext::fungibles
// --steps=50
// --repeat=20
// --json
// --template=./scripts/templates/pallet-weight-template.hbs
// --output=./pallets/api-vnext/src/fungibles/weights.rs
// --extrinsic=

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for `pallet_api_vnext::fungibles`.
pub trait WeightInfo {
	fn transfer() -> Weight;
	fn transfer_from() -> Weight;
	fn approve(a: u32, c: u32, ) -> Weight;
	fn create() -> Weight;
	fn start_destroy() -> Weight;
	fn set_metadata() -> Weight;
	fn clear_metadata() -> Weight;
	fn mint() -> Weight;
	fn burn() -> Weight;
	fn total_supply() -> Weight;
	fn balance_of() -> Weight;
	fn allowance() -> Weight;
	fn metadata_name() -> Weight;
	fn metadata_symbol() -> Weight;
	fn metadata_decimals() -> Weight;
	fn exists() -> Weight;
}

/// Weights for `pallet_api_vnext::fungibles` using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: `Revive::OriginalAccount` (r:1 w:0)
	/// Proof: `Revive::OriginalAccount` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `MaxEncodedLen`)
	/// Storage: `Assets::Asset` (r:1 w:1)
	/// Proof: `Assets::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `Assets::Account` (r:2 w:2)
	/// Proof: `Assets::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn transfer() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `781`
		//  Estimated: `6208`
		// Minimum execution time: 47_000_000 picoseconds.
		Weight::from_parts(49_000_000, 6208)
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	/// Storage: `Revive::OriginalAccount` (r:2 w:0)
	/// Proof: `Revive::OriginalAccount` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `MaxEncodedLen`)
	/// Storage: `Assets::Asset` (r:1 w:1)
	/// Proof: `Assets::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `Assets::Approvals` (r:1 w:1)
	/// Proof: `Assets::Approvals` (`max_values`: None, `max_size`: Some(148), added: 2623, mode: `MaxEncodedLen`)
	/// Storage: `Assets::Account` (r:2 w:2)
	/// Proof: `Assets::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn transfer_from() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `951`
		//  Estimated: `6208`
		// Minimum execution time: 68_000_000 picoseconds.
		Weight::from_parts(69_000_000, 6208)
			.saturating_add(T::DbWeight::get().reads(7_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	/// Storage: `Revive::OriginalAccount` (r:1 w:0)
	/// Proof: `Revive::OriginalAccount` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `MaxEncodedLen`)
	/// Storage: `Assets::Approvals` (r:1 w:1)
	/// Proof: `Assets::Approvals` (`max_values`: None, `max_size`: Some(148), added: 2623, mode: `MaxEncodedLen`)
	/// Storage: `Assets::Asset` (r:1 w:1)
	/// Proof: `Assets::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// The range of component `a` is `[0, 1]`.
	/// The range of component `c` is `[0, 1]`.
	fn approve(a: u32, c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `699 + c * (140 Â±0)`
		//  Estimated: `3675`
		// Minimum execution time: 27_000_000 picoseconds.
		Weight::from_parts(7_862_244, 3675)
			// Standard Error: 43_634
			.saturating_add(Weight::from_parts(20_137_755, 0).saturating_mul(a.into()))
			// Standard Error: 43_634
			.saturating_add(Weight::from_parts(35_150_000, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `Revive::OriginalAccount` (r:1 w:0)
	/// Proof: `Revive::OriginalAccount` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `MaxEncodedLen`)
	/// Storage: `Assets::NextAssetId` (r:1 w:1)
	/// Proof: `Assets::NextAssetId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Assets::Asset` (r:1 w:1)
	/// Proof: `Assets::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	fn create() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `471`
		//  Estimated: `3675`
		// Minimum execution time: 32_000_000 picoseconds.
		Weight::from_parts(33_000_000, 3675)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `Assets::Asset` (r:1 w:1)
	/// Proof: `Assets::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	fn start_destroy() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `337`
		//  Estimated: `3675`
		// Minimum execution time: 10_000_000 picoseconds.
		Weight::from_parts(11_000_000, 3675)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Assets::Asset` (r:1 w:0)
	/// Proof: `Assets::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `Assets::Metadata` (r:1 w:1)
	/// Proof: `Assets::Metadata` (`max_values`: None, `max_size`: Some(140), added: 2615, mode: `MaxEncodedLen`)
	fn set_metadata() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `505`
		//  Estimated: `3675`
		// Minimum execution time: 15_000_000 picoseconds.
		Weight::from_parts(16_000_000, 3675)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Assets::Asset` (r:1 w:0)
	/// Proof: `Assets::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `Assets::Metadata` (r:1 w:1)
	/// Proof: `Assets::Metadata` (`max_values`: None, `max_size`: Some(140), added: 2615, mode: `MaxEncodedLen`)
	fn clear_metadata() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `645`
		//  Estimated: `3675`
		// Minimum execution time: 29_000_000 picoseconds.
		Weight::from_parts(29_000_000, 3675)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Revive::OriginalAccount` (r:1 w:0)
	/// Proof: `Revive::OriginalAccount` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `MaxEncodedLen`)
	/// Storage: `Assets::Asset` (r:1 w:1)
	/// Proof: `Assets::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `Assets::Account` (r:1 w:1)
	/// Proof: `Assets::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn mint() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `584`
		//  Estimated: `3675`
		// Minimum execution time: 27_000_000 picoseconds.
		Weight::from_parts(28_000_000, 3675)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: `Revive::OriginalAccount` (r:1 w:0)
	/// Proof: `Revive::OriginalAccount` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `MaxEncodedLen`)
	/// Storage: `Assets::Account` (r:1 w:1)
	/// Proof: `Assets::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// Storage: `Assets::Asset` (r:1 w:1)
	/// Proof: `Assets::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn burn() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `744`
		//  Estimated: `3675`
		// Minimum execution time: 40_000_000 picoseconds.
		Weight::from_parts(41_000_000, 3675)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: `Assets::Asset` (r:1 w:0)
	/// Proof: `Assets::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	fn total_supply() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `300`
		//  Estimated: `3675`
		// Minimum execution time: 5_000_000 picoseconds.
		Weight::from_parts(5_000_000, 3675)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	/// Storage: `Revive::OriginalAccount` (r:1 w:0)
	/// Proof: `Revive::OriginalAccount` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `MaxEncodedLen`)
	/// Storage: `Assets::Account` (r:1 w:0)
	/// Proof: `Assets::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	fn balance_of() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `346`
		//  Estimated: `3599`
		// Minimum execution time: 7_000_000 picoseconds.
		Weight::from_parts(8_000_000, 3599)
			.saturating_add(T::DbWeight::get().reads(2_u64))
	}
	/// Storage: `Revive::OriginalAccount` (r:2 w:0)
	/// Proof: `Revive::OriginalAccount` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `MaxEncodedLen`)
	/// Storage: `Assets::Approvals` (r:1 w:0)
	/// Proof: `Assets::Approvals` (`max_values`: None, `max_size`: Some(148), added: 2623, mode: `MaxEncodedLen`)
	fn allowance() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `291`
		//  Estimated: `6044`
		// Minimum execution time: 10_000_000 picoseconds.
		Weight::from_parts(11_000_000, 6044)
			.saturating_add(T::DbWeight::get().reads(3_u64))
	}
	/// Storage: `Assets::Metadata` (r:1 w:0)
	/// Proof: `Assets::Metadata` (`max_values`: None, `max_size`: Some(140), added: 2615, mode: `MaxEncodedLen`)
	fn metadata_name() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `267`
		//  Estimated: `3605`
		// Minimum execution time: 8_000_000 picoseconds.
		Weight::from_parts(8_000_000, 3605)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	/// Storage: `Assets::Metadata` (r:1 w:0)
	/// Proof: `Assets::Metadata` (`max_values`: None, `max_size`: Some(140), added: 2615, mode: `MaxEncodedLen`)
	fn metadata_symbol() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `267`
		//  Estimated: `3605`
		// Minimum execution time: 8_000_000 picoseconds.
		Weight::from_parts(8_000_000, 3605)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	/// Storage: `Assets::Metadata` (r:1 w:0)
	/// Proof: `Assets::Metadata` (`max_values`: None, `max_size`: Some(140), added: 2615, mode: `MaxEncodedLen`)
	fn metadata_decimals() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `136`
		//  Estimated: `3605`
		// Minimum execution time: 5_000_000 picoseconds.
		Weight::from_parts(6_000_000, 3605)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	/// Storage: `Assets::Asset` (r:1 w:0)
	/// Proof: `Assets::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	fn exists() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `139`
		//  Estimated: `3675`
		// Minimum execution time: 4_000_000 picoseconds.
		Weight::from_parts(5_000_000, 3675)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
}

// For backwards compatibility and tests.
impl WeightInfo for () {
	/// Storage: `Revive::OriginalAccount` (r:1 w:0)
	/// Proof: `Revive::OriginalAccount` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `MaxEncodedLen`)
	/// Storage: `Assets::Asset` (r:1 w:1)
	/// Proof: `Assets::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `Assets::Account` (r:2 w:2)
	/// Proof: `Assets::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn transfer() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `781`
		//  Estimated: `6208`
		// Minimum execution time: 47_000_000 picoseconds.
		Weight::from_parts(49_000_000, 6208)
			.saturating_add(RocksDbWeight::get().reads(5_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
	}
	/// Storage: `Revive::OriginalAccount` (r:2 w:0)
	/// Proof: `Revive::OriginalAccount` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `MaxEncodedLen`)
	/// Storage: `Assets::Asset` (r:1 w:1)
	/// Proof: `Assets::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `Assets::Approvals` (r:1 w:1)
	/// Proof: `Assets::Approvals` (`max_values`: None, `max_size`: Some(148), added: 2623, mode: `MaxEncodedLen`)
	/// Storage: `Assets::Account` (r:2 w:2)
	/// Proof: `Assets::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn transfer_from() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `951`
		//  Estimated: `6208`
		// Minimum execution time: 68_000_000 picoseconds.
		Weight::from_parts(69_000_000, 6208)
			.saturating_add(RocksDbWeight::get().reads(7_u64))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
	}
	/// Storage: `Revive::OriginalAccount` (r:1 w:0)
	/// Proof: `Revive::OriginalAccount` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `MaxEncodedLen`)
	/// Storage: `Assets::Approvals` (r:1 w:1)
	/// Proof: `Assets::Approvals` (`max_values`: None, `max_size`: Some(148), added: 2623, mode: `MaxEncodedLen`)
	/// Storage: `Assets::Asset` (r:1 w:1)
	/// Proof: `Assets::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// The range of component `a` is `[0, 1]`.
	/// The range of component `c` is `[0, 1]`.
	fn approve(a: u32, c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `699 + c * (140 Â±0)`
		//  Estimated: `3675`
		// Minimum execution time: 27_000_000 picoseconds.
		Weight::from_parts(7_862_244, 3675)
			// Standard Error: 43_634
			.saturating_add(Weight::from_parts(20_137_755, 0).saturating_mul(a.into()))
			// Standard Error: 43_634
			.saturating_add(Weight::from_parts(35_150_000, 0).saturating_mul(c.into()))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `Revive::OriginalAccount` (r:1 w:0)
	/// Proof: `Revive::OriginalAccount` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `MaxEncodedLen`)
	/// Storage: `Assets::NextAssetId` (r:1 w:1)
	/// Proof: `Assets::NextAssetId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Assets::Asset` (r:1 w:1)
	/// Proof: `Assets::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	fn create() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `471`
		//  Estimated: `3675`
		// Minimum execution time: 32_000_000 picoseconds.
		Weight::from_parts(33_000_000, 3675)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `Assets::Asset` (r:1 w:1)
	/// Proof: `Assets::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	fn start_destroy() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `337`
		//  Estimated: `3675`
		// Minimum execution time: 10_000_000 picoseconds.
		Weight::from_parts(11_000_000, 3675)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Assets::Asset` (r:1 w:0)
	/// Proof: `Assets::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `Assets::Metadata` (r:1 w:1)
	/// Proof: `Assets::Metadata` (`max_values`: None, `max_size`: Some(140), added: 2615, mode: `MaxEncodedLen`)
	fn set_metadata() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `505`
		//  Estimated: `3675`
		// Minimum execution time: 15_000_000 picoseconds.
		Weight::from_parts(16_000_000, 3675)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Assets::Asset` (r:1 w:0)
	/// Proof: `Assets::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `Assets::Metadata` (r:1 w:1)
	/// Proof: `Assets::Metadata` (`max_values`: None, `max_size`: Some(140), added: 2615, mode: `MaxEncodedLen`)
	fn clear_metadata() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `645`
		//  Estimated: `3675`
		// Minimum execution time: 29_000_000 picoseconds.
		Weight::from_parts(29_000_000, 3675)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Revive::OriginalAccount` (r:1 w:0)
	/// Proof: `Revive::OriginalAccount` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `MaxEncodedLen`)
	/// Storage: `Assets::Asset` (r:1 w:1)
	/// Proof: `Assets::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `Assets::Account` (r:1 w:1)
	/// Proof: `Assets::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn mint() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `584`
		//  Estimated: `3675`
		// Minimum execution time: 27_000_000 picoseconds.
		Weight::from_parts(28_000_000, 3675)
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: `Revive::OriginalAccount` (r:1 w:0)
	/// Proof: `Revive::OriginalAccount` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `MaxEncodedLen`)
	/// Storage: `Assets::Account` (r:1 w:1)
	/// Proof: `Assets::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// Storage: `Assets::Asset` (r:1 w:1)
	/// Proof: `Assets::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn burn() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `744`
		//  Estimated: `3675`
		// Minimum execution time: 40_000_000 picoseconds.
		Weight::from_parts(41_000_000, 3675)
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: `Assets::Asset` (r:1 w:0)
	/// Proof: `Assets::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	fn total_supply() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `300`
		//  Estimated: `3675`
		// Minimum execution time: 5_000_000 picoseconds.
		Weight::from_parts(5_000_000, 3675)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	/// Storage: `Revive::OriginalAccount` (r:1 w:0)
	/// Proof: `Revive::OriginalAccount` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `MaxEncodedLen`)
	/// Storage: `Assets::Account` (r:1 w:0)
	/// Proof: `Assets::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	fn balance_of() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `346`
		//  Estimated: `3599`
		// Minimum execution time: 7_000_000 picoseconds.
		Weight::from_parts(8_000_000, 3599)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
	}
	/// Storage: `Revive::OriginalAccount` (r:2 w:0)
	/// Proof: `Revive::OriginalAccount` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `MaxEncodedLen`)
	/// Storage: `Assets::Approvals` (r:1 w:0)
	/// Proof: `Assets::Approvals` (`max_values`: None, `max_size`: Some(148), added: 2623, mode: `MaxEncodedLen`)
	fn allowance() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `291`
		//  Estimated: `6044`
		// Minimum execution time: 10_000_000 picoseconds.
		Weight::from_parts(11_000_000, 6044)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
	}
	/// Storage: `Assets::Metadata` (r:1 w:0)
	/// Proof: `Assets::Metadata` (`max_values`: None, `max_size`: Some(140), added: 2615, mode: `MaxEncodedLen`)
	fn metadata_name() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `267`
		//  Estimated: `3605`
		// Minimum execution time: 8_000_000 picoseconds.
		Weight::from_parts(8_000_000, 3605)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	/// Storage: `Assets::Metadata` (r:1 w:0)
	/// Proof: `Assets::Metadata` (`max_values`: None, `max_size`: Some(140), added: 2615, mode: `MaxEncodedLen`)
	fn metadata_symbol() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `267`
		//  Estimated: `3605`
		// Minimum execution time: 8_000_000 picoseconds.
		Weight::from_parts(8_000_000, 3605)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	/// Storage: `Assets::Metadata` (r:1 w:0)
	/// Proof: `Assets::Metadata` (`max_values`: None, `max_size`: Some(140), added: 2615, mode: `MaxEncodedLen`)
	fn metadata_decimals() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `136`
		//  Estimated: `3605`
		// Minimum execution time: 5_000_000 picoseconds.
		Weight::from_parts(6_000_000, 3605)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	/// Storage: `Assets::Asset` (r:1 w:0)
	/// Proof: `Assets::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	fn exists() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `139`
		//  Estimated: `3675`
		// Minimum execution time: 4_000_000 picoseconds.
		Weight::from_parts(5_000_000, 3675)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
}

