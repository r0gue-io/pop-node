name: ci

on:
  push:
    branches: [ main ]
  pull_request:
    types: [ opened, synchronize, reopened, ready_for_review ]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: "./.github/actions/init"

      - name: Check formatting
        run: |
          rustup toolchain install nightly --profile minimal --component rustfmt
          cargo +nightly fmt --all -- --check

      - name: Check manifests
        run: |
          cargo install taplo-cli --locked
          taplo format --check

      - name: Check features
        run: |
          cargo install zepter --locked
          zepter lint propagate-feature --feature try-runtime --left-side-feature-missing=ignore --workspace --feature-enables-dep="try-runtime:frame-try-runtime" --locked
          zepter lint propagate-feature --feature runtime-benchmarks --left-side-feature-missing=ignore --workspace --feature-enables-dep="runtime-benchmarks:frame-benchmarking" --locked
          zepter lint propagate-feature --feature std --left-side-feature-missing=ignore --workspace --locked
          zepter format features

  check:
    needs: lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: "./.github/actions/init"

      - name: Check Build
        run: |
          cargo check --release --locked --features=runtime-benchmarks,try-runtime

  check-ismp:
    needs: lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: "./.github/actions/init"
      - name: Check Build with ISMP
        run: |
          cargo check --release --locked --features=ismp,runtime-benchmarks,try-runtime

  clippy:
    needs: lint
    runs-on: ubuntu-latest
    permissions:
      checks: write
    env:
      RUSTFLAGS: "-Wmissing_docs"
      SKIP_WASM_BUILD: 1
    steps:
      - uses: actions/checkout@v4

      - uses: "./.github/actions/init"

      - name: Annotate with Clippy warnings
        uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --release --locked --features=runtime-benchmarks

  clippy-ismp:
    needs: lint
    runs-on: ubuntu-latest
    permissions:
      checks: write
    env:
      RUSTFLAGS: "-Wmissing_docs"
      SKIP_WASM_BUILD: 1
    steps:
      - uses: actions/checkout@v4

      - uses: "./.github/actions/init"

      - name: Annotate with Clippy warnings
        uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --release --locked --features=runtime-benchmarks,ismp

  test:
    needs: lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: "./.github/actions/init"

      - name: Run tests
        run: cargo test --release --locked --workspace --features=runtime-benchmarks --exclude integration-tests

  integration-tests:
    needs: lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: "./.github/actions/init"

      - name: Run integration tests
        run: cargo test --release --locked --package integration-tests

  api-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: "./.github/actions/init"

      - name: Run tests
        working-directory: pop-api
        run: cargo test --release --all-features

  api-integration-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: "./.github/actions/init"

      - name: Run integration tests
        working-directory: pop-api/integration-tests
        run: cargo test --release

  coverage:
    needs: lint
    runs-on: ubuntu-latest
    env:
      RUSTFLAGS: "-C debuginfo=0"
    steps:
      - uses: actions/checkout@v4

      - uses: "./.github/actions/init"

      - name: Install cargo-llvm-cov
        uses: taiki-e/install-action@cargo-llvm-cov

      - name: Generate code coverage
        run: cargo llvm-cov --all-features --workspace --exclude integration-tests --lib --bins --codecov --output-path codecov.json

      - name: Upload to codecov.io
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: codecov.json
          fail_ci_if_error: true
