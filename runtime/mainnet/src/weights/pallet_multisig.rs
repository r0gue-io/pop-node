
//! Autogenerated weights for `pallet_multisig`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 46.0.0
//! DATE: 2025-02-25, STEPS: `2`, REPEAT: `1`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `tux`, CPU: `12th Gen Intel(R) Core(TM) i7-12700H`
//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("./scripts/pop-raw.json")`, DB CACHE: 1024

// Executed Command:
// ./target/release/pop-node
// benchmark
// pallet
// --chain=./scripts/pop-raw.json
// --genesis-builder-preset=pop-mainnet
// --pallet=*
// --extrinsic=*
// --steps=2
// --repeat=1
// --output=./runtime/mainnet/src/weights
// --exclude-pallets=pallet_collator_selection,pallet_xcm_benchmarks::generic,pallet_xcm_benchmarks::fungible,pallet_xcm

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;

/// Weight functions for `pallet_multisig`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_multisig::WeightInfo for WeightInfo<T> {
	/// The range of component `z` is `[0, 10000]`.
	fn as_multi_threshold_1(_z: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 17_914_000 picoseconds.
		Weight::from_parts(30_614_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	/// Storage: `Multisig::Multisigs` (r:1 w:1)
	/// Proof: `Multisig::Multisigs` (`max_values`: None, `max_size`: Some(3346), added: 5821, mode: `MaxEncodedLen`)
	/// The range of component `s` is `[2, 100]`.
	/// The range of component `z` is `[0, 10000]`.
	fn as_multi_create(s: u32, z: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `205 + s * (3 ±0)`
		//  Estimated: `6811`
		// Minimum execution time: 60_164_000 picoseconds.
		Weight::from_parts(50_764_040, 0)
			.saturating_add(Weight::from_parts(0, 6811))
			// Standard Error: 6_283
			.saturating_add(Weight::from_parts(215_729, 0).saturating_mul(s.into()))
			// Standard Error: 61
			.saturating_add(Weight::from_parts(896, 0).saturating_mul(z.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Multisig::Multisigs` (r:1 w:1)
	/// Proof: `Multisig::Multisigs` (`max_values`: None, `max_size`: Some(3346), added: 5821, mode: `MaxEncodedLen`)
	/// The range of component `s` is `[3, 100]`.
	/// The range of component `z` is `[0, 10000]`.
	fn as_multi_approve(s: u32, z: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `315`
		//  Estimated: `6811`
		// Minimum execution time: 31_782_000 picoseconds.
		Weight::from_parts(20_499_525, 0)
			.saturating_add(Weight::from_parts(0, 6811))
			// Standard Error: 2_910
			.saturating_add(Weight::from_parts(112_824, 0).saturating_mul(s.into()))
			// Standard Error: 28
			.saturating_add(Weight::from_parts(1_747, 0).saturating_mul(z.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Multisig::Multisigs` (r:1 w:1)
	/// Proof: `Multisig::Multisigs` (`max_values`: None, `max_size`: Some(3346), added: 5821, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// The range of component `s` is `[2, 100]`.
	/// The range of component `z` is `[0, 10000]`.
	fn as_multi_complete(s: u32, z: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `348 + s * (34 ±0)`
		//  Estimated: `6811`
		// Minimum execution time: 55_776_000 picoseconds.
		Weight::from_parts(44_768_428, 0)
			.saturating_add(Weight::from_parts(0, 6811))
			// Standard Error: 94_405
			.saturating_add(Weight::from_parts(217_035, 0).saturating_mul(s.into()))
			// Standard Error: 925
			.saturating_add(Weight::from_parts(1_057, 0).saturating_mul(z.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: `Multisig::Multisigs` (r:1 w:1)
	/// Proof: `Multisig::Multisigs` (`max_values`: None, `max_size`: Some(3346), added: 5821, mode: `MaxEncodedLen`)
	/// The range of component `s` is `[2, 100]`.
	fn approve_as_multi_create(s: u32) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `205 + s * (3 ±0)`
		//  Estimated: `6811`
		// Minimum execution time: 36_111_000 picoseconds.
		Weight::from_parts(33_860_816, 0)
			.saturating_add(Weight::from_parts(0, 6811))
			// Standard Error: 32_555
			.saturating_add(Weight::from_parts(166_591, 0).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Multisig::Multisigs` (r:1 w:1)
	/// Proof: `Multisig::Multisigs` (`max_values`: None, `max_size`: Some(3346), added: 5821, mode: `MaxEncodedLen`)
	/// The range of component `s` is `[2, 100]`.
	fn approve_as_multi_approve(s: u32) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `315`
		//  Estimated: `6811`
		// Minimum execution time: 19_935_000 picoseconds.
		Weight::from_parts(18_041_795, 0)
			.saturating_add(Weight::from_parts(0, 6811))
			// Standard Error: 29_489
			.saturating_add(Weight::from_parts(127_852, 0).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Multisig::Multisigs` (r:1 w:1)
	/// Proof: `Multisig::Multisigs` (`max_values`: None, `max_size`: Some(3346), added: 5821, mode: `MaxEncodedLen`)
	/// The range of component `s` is `[2, 100]`.
	fn cancel_as_multi(s: u32) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `412 + s * (2 ±0)`
		//  Estimated: `6811`
		// Minimum execution time: 35_751_000 picoseconds.
		Weight::from_parts(41_404_183, 0)
			.saturating_add(Weight::from_parts(0, 6811))
			// Standard Error: 2_350
			.saturating_add(Weight::from_parts(116_408, 0).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
}
