
//! Autogenerated weights for `pallet_multisig`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 46.0.0
//! DATE: 2025-02-28, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `tux`, CPU: `12th Gen Intel(R) Core(TM) i7-12700H`
//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("pop")`, DB CACHE: 1024

// Executed Command:
// ./target/release/pop-node
// benchmark
// pallet
// --chain=pop
// --pallet=pallet_multisig
// --genesis-builder-preset=pop-mainnet
// --extrinsic=*
// --steps=50
// --repeat=20
// --output=./runtime/mainnet/src/weights/

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;

/// Weight functions for `pallet_multisig`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_multisig::WeightInfo for WeightInfo<T> {
	/// The range of component `z` is `[0, 10000]`.
	fn as_multi_threshold_1(z: u32) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 12_447_000 picoseconds.
		Weight::from_parts(13_361_969, 0)
			.saturating_add(Weight::from_parts(0, 0))
			// Standard Error: 14
			.saturating_add(Weight::from_parts(355, 0).saturating_mul(z.into()))
	}
	/// Storage: `Multisig::Multisigs` (r:1 w:1)
	/// Proof: `Multisig::Multisigs` (`max_values`: None, `max_size`: Some(3346), added: 5821, mode: `MaxEncodedLen`)
	/// The range of component `s` is `[2, 100]`.
	/// The range of component `z` is `[0, 10000]`.
	fn as_multi_create(s: u32, z: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `295 + s * (2 ±0)`
		//  Estimated: `6811`
		// Minimum execution time: 43_797_000 picoseconds.
		Weight::from_parts(35_033_228, 0)
			.saturating_add(Weight::from_parts(0, 6811))
			// Standard Error: 3_581
			.saturating_add(Weight::from_parts(111_792, 0).saturating_mul(s.into()))
			// Standard Error: 35
			.saturating_add(Weight::from_parts(1_438, 0).saturating_mul(z.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Multisig::Multisigs` (r:1 w:1)
	/// Proof: `Multisig::Multisigs` (`max_values`: None, `max_size`: Some(3346), added: 5821, mode: `MaxEncodedLen`)
	/// The range of component `s` is `[3, 100]`.
	/// The range of component `z` is `[0, 10000]`.
	fn as_multi_approve(s: u32, z: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `315`
		//  Estimated: `6811`
		// Minimum execution time: 26_914_000 picoseconds.
		Weight::from_parts(20_203_620, 0)
			.saturating_add(Weight::from_parts(0, 6811))
			// Standard Error: 3_788
			.saturating_add(Weight::from_parts(98_264, 0).saturating_mul(s.into()))
			// Standard Error: 37
			.saturating_add(Weight::from_parts(1_361, 0).saturating_mul(z.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Multisig::Multisigs` (r:1 w:1)
	/// Proof: `Multisig::Multisigs` (`max_values`: None, `max_size`: Some(3346), added: 5821, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// The range of component `s` is `[2, 100]`.
	/// The range of component `z` is `[0, 10000]`.
	fn as_multi_complete(s: u32, z: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `418 + s * (33 ±0)`
		//  Estimated: `6811`
		// Minimum execution time: 47_785_000 picoseconds.
		Weight::from_parts(43_209_182, 0)
			.saturating_add(Weight::from_parts(0, 6811))
			// Standard Error: 6_527
			.saturating_add(Weight::from_parts(122_916, 0).saturating_mul(s.into()))
			// Standard Error: 63
			.saturating_add(Weight::from_parts(996, 0).saturating_mul(z.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: `Multisig::Multisigs` (r:1 w:1)
	/// Proof: `Multisig::Multisigs` (`max_values`: None, `max_size`: Some(3346), added: 5821, mode: `MaxEncodedLen`)
	/// The range of component `s` is `[2, 100]`.
	fn approve_as_multi_create(s: u32) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `295 + s * (2 ±0)`
		//  Estimated: `6811`
		// Minimum execution time: 30_243_000 picoseconds.
		Weight::from_parts(32_155_550, 0)
			.saturating_add(Weight::from_parts(0, 6811))
			// Standard Error: 1_184
			.saturating_add(Weight::from_parts(121_244, 0).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Multisig::Multisigs` (r:1 w:1)
	/// Proof: `Multisig::Multisigs` (`max_values`: None, `max_size`: Some(3346), added: 5821, mode: `MaxEncodedLen`)
	/// The range of component `s` is `[2, 100]`.
	/// The range of component `z` is `[0, 10000]`.
	fn approve_as_multi_approve(s: u32) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `315`
		//  Estimated: `6811`
		// Minimum execution time: 16_349_000 picoseconds.
		Weight::from_parts(17_887_716, 0)
			.saturating_add(Weight::from_parts(0, 6811))
			// Standard Error: 842
			.saturating_add(Weight::from_parts(92_045, 0).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Multisig::Multisigs` (r:1 w:1)
	/// Proof: `Multisig::Multisigs` (`max_values`: None, `max_size`: Some(3346), added: 5821, mode: `MaxEncodedLen`)
	/// The range of component `s` is `[2, 100]`.
	fn cancel_as_multi(s: u32) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `482 + s * (1 ±0)`
		//  Estimated: `6811`
		// Minimum execution time: 30_272_000 picoseconds.
		Weight::from_parts(35_241_338, 0)
			.saturating_add(Weight::from_parts(0, 6811))
			// Standard Error: 4_312
			.saturating_add(Weight::from_parts(122_611, 0).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
}
